#include <sf_benchmarks.hpp>
#include <sf_libraries.hpp>
namespace sf::functions {
std::unordered_map<function_key, multi_eval_func<float>> funcs_float = {
{{"stl", "sin", 1 }, scalar_func_map<float>([](float x) -> float { return std::sin(x); })},
{{"stl", "cos", 1 }, scalar_func_map<float>([](float x) -> float { return std::cos(x); })},
{{"stl", "tan", 1 }, scalar_func_map<float>([](float x) -> float { return std::tan(x); })},
{{"stl", "asin", 1 }, scalar_func_map<float>([](float x) -> float { return std::asin(x); })},
{{"stl", "acos", 1 }, scalar_func_map<float>([](float x) -> float { return std::acos(x); })},
{{"stl", "atan", 1 }, scalar_func_map<float>([](float x) -> float { return std::atan(x); })},
{{"stl", "sinh", 1 }, scalar_func_map<float>([](float x) -> float { return std::sinh(x); })},
{{"stl", "cosh", 1 }, scalar_func_map<float>([](float x) -> float { return std::cosh(x); })},
{{"stl", "tanh", 1 }, scalar_func_map<float>([](float x) -> float { return std::tanh(x); })},
{{"stl", "asinh", 1 }, scalar_func_map<float>([](float x) -> float { return std::asinh(x); })},
{{"stl", "acosh", 1 }, scalar_func_map<float>([](float x) -> float { return std::acosh(x); })},
{{"stl", "atanh", 1 }, scalar_func_map<float>([](float x) -> float { return std::atanh(x); })},
{{"stl", "tgamma", 1 }, scalar_func_map<float>([](float x) -> float { return std::tgamma(x); })},
{{"stl", "lgamma", 1 }, scalar_func_map<float>([](float x) -> float { return std::lgamma(x); })},
{{"stl", "erf", 1 }, scalar_func_map<float>([](float x) -> float { return std::erf(x); })},
{{"stl", "erfc", 1 }, scalar_func_map<float>([](float x) -> float { return std::erfc(x); })},
{{"stl", "log", 1 }, scalar_func_map<float>([](float x) -> float { return std::log(x); })},
{{"stl", "log2", 1 }, scalar_func_map<float>([](float x) -> float { return std::log2(x); })},
{{"stl", "log10", 1 }, scalar_func_map<float>([](float x) -> float { return std::log10(x); })},
{{"stl", "exp", 1 }, scalar_func_map<float>([](float x) -> float { return std::exp(x); })},
{{"stl", "exp2", 1 }, scalar_func_map<float>([](float x) -> float { return std::exp2(x); })},
{{"stl", "exp10", 1 }, scalar_func_map<float>([](float x) -> float { return exp10(x); })},
{{"stl", "sqrt", 1 }, scalar_func_map<float>([](float x) -> float { return std::sqrt(x); })},
{{"stl", "pow3.5", 1 }, scalar_func_map<float>([](float x) -> float { return std::pow(x, 3.5); })},
{{"stl", "pow13", 1 }, scalar_func_map<float>([](float x) -> float { return std::pow(x, 13); })},
{{"stl", "memset", 1 }, [](const float *src, float *dst, size_t N) { std::memset(dst, 0, N * sizeof(float)); }},
{{"stl", "memcpy", 1 }, [](const float *src, float *dst, size_t N) { std::memcpy(dst, src, N * sizeof(float)); }},
{{"af", "sin", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return sin(x); })},
{{"af", "sin", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return sin(x); })},
{{"af", "cos", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return cos(x); })},
{{"af", "cos", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return cos(x); })},
{{"af", "tan", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return tan(x); })},
{{"af", "tan", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return tan(x); })},
{{"af", "asin", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return asin(x); })},
{{"af", "asin", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return asin(x); })},
{{"af", "acos", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return acos(x); })},
{{"af", "acos", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return acos(x); })},
{{"af", "atan", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return atan(x); })},
{{"af", "atan", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return atan(x); })},
{{"af", "sinh", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return sinh(x); })},
{{"af", "sinh", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return sinh(x); })},
{{"af", "cosh", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return cosh(x); })},
{{"af", "cosh", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return cosh(x); })},
{{"af", "tanh", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return tanh(x); })},
{{"af", "tanh", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return tanh(x); })},
{{"af", "asinh", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return asinh(x); })},
{{"af", "asinh", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return asinh(x); })},
{{"af", "acosh", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return acosh(x); })},
{{"af", "acosh", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return acosh(x); })},
{{"af", "atanh", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return atanh(x); })},
{{"af", "atanh", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return atanh(x); })},
{{"af", "log", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return log(x); })},
{{"af", "log", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return log(x); })},
{{"af", "log2", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return log2(x); })},
{{"af", "log2", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return log2(x); })},
{{"af", "log10", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return log10(x); })},
{{"af", "log10", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return log10(x); })},
{{"af", "exp", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return exp(x); })},
{{"af", "exp", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return exp(x); })},
{{"af", "exp2", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return exp2(x); })},
{{"af", "exp2", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return exp2(x); })},
{{"af", "exp10", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return exp10(x); })},
{{"af", "exp10", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return exp10(x); })},
{{"af", "sqrt", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return sqrt(x); })},
{{"af", "sqrt", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return sqrt(x); })},
{{"af", "pow3.5", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return pow(x, 3.5); })},
{{"af", "pow3.5", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return pow(x, 3.5); })},
{{"af", "pow13", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return pow(x, 13); })},
{{"af", "pow13", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return pow(x, 13); })},
{{"af", "memcpy", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return x; })},
{{"af", "memcpy", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return x; })},
{{"af", "memset", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return Vec8f{0.0}; })},
{{"af", "memset", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return Vec16f{0.0}; })},
{{"eigen", "cos", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).cos(); }},
{{"eigen", "sin", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).sin(); }},
{{"eigen", "tan", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).tan(); }},
{{"eigen", "cosh", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).cosh(); }},
{{"eigen", "sinh", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).sinh(); }},
{{"eigen", "tanh", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).tanh(); }},
{{"eigen", "exp", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).exp(); }},
{{"eigen", "log", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).log(); }},
{{"eigen", "log10", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).log10(); }},
{{"eigen", "pow3.5", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).pow(3.5); }},
{{"eigen", "pow13", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).pow(13); }},
{{"eigen", "asin", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).asin(); }},
{{"eigen", "acos", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).acos(); }},
{{"eigen", "atan", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).atan(); }},
{{"eigen", "asinh", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).asinh(); }},
{{"eigen", "acosh", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).acosh(); }},
{{"eigen", "atanh", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).atanh(); }},
{{"eigen", "erf", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).erf(); }},
{{"eigen", "erfc", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).erfc(); }},
{{"eigen", "lgamma", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).lgamma(); }},
{{"eigen", "digamma", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).digamma(); }},
{{"eigen", "ndtri", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).ndtri(); }},
{{"eigen", "sqrt", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).sqrt(); }},
{{"eigen", "rsqrt", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).rsqrt(); }}
};

std::unordered_map<function_key, multi_eval_func<double>> funcs_double = {
{{"stl", "sin", 1 }, scalar_func_map<double>([](double x) -> double { return std::sin(x); })},
{{"stl", "cos", 1 }, scalar_func_map<double>([](double x) -> double { return std::cos(x); })},
{{"stl", "tan", 1 }, scalar_func_map<double>([](double x) -> double { return std::tan(x); })},
{{"stl", "asin", 1 }, scalar_func_map<double>([](double x) -> double { return std::asin(x); })},
{{"stl", "acos", 1 }, scalar_func_map<double>([](double x) -> double { return std::acos(x); })},
{{"stl", "atan", 1 }, scalar_func_map<double>([](double x) -> double { return std::atan(x); })},
{{"stl", "sinh", 1 }, scalar_func_map<double>([](double x) -> double { return std::sinh(x); })},
{{"stl", "cosh", 1 }, scalar_func_map<double>([](double x) -> double { return std::cosh(x); })},
{{"stl", "tanh", 1 }, scalar_func_map<double>([](double x) -> double { return std::tanh(x); })},
{{"stl", "asinh", 1 }, scalar_func_map<double>([](double x) -> double { return std::asinh(x); })},
{{"stl", "acosh", 1 }, scalar_func_map<double>([](double x) -> double { return std::acosh(x); })},
{{"stl", "atanh", 1 }, scalar_func_map<double>([](double x) -> double { return std::atanh(x); })},
{{"stl", "tgamma", 1 }, scalar_func_map<double>([](double x) -> double { return std::tgamma(x); })},
{{"stl", "lgamma", 1 }, scalar_func_map<double>([](double x) -> double { return std::lgamma(x); })},
{{"stl", "erf", 1 }, scalar_func_map<double>([](double x) -> double { return std::erf(x); })},
{{"stl", "erfc", 1 }, scalar_func_map<double>([](double x) -> double { return std::erfc(x); })},
{{"stl", "log", 1 }, scalar_func_map<double>([](double x) -> double { return std::log(x); })},
{{"stl", "log2", 1 }, scalar_func_map<double>([](double x) -> double { return std::log2(x); })},
{{"stl", "log10", 1 }, scalar_func_map<double>([](double x) -> double { return std::log10(x); })},
{{"stl", "exp", 1 }, scalar_func_map<double>([](double x) -> double { return std::exp(x); })},
{{"stl", "exp2", 1 }, scalar_func_map<double>([](double x) -> double { return std::exp2(x); })},
{{"stl", "exp10", 1 }, scalar_func_map<double>([](double x) -> double { return exp10(x); })},
{{"stl", "sqrt", 1 }, scalar_func_map<double>([](double x) -> double { return std::sqrt(x); })},
{{"stl", "pow3.5", 1 }, scalar_func_map<double>([](double x) -> double { return std::pow(x, 3.5); })},
{{"stl", "pow13", 1 }, scalar_func_map<double>([](double x) -> double { return std::pow(x, 13); })},
{{"stl", "memset", 1 }, [](const double *src, double *dst, size_t N) { std::memset(dst, 0, N * sizeof(double)); }},
{{"stl", "memcpy", 1 }, [](const double *src, double *dst, size_t N) { std::memcpy(dst, src, N * sizeof(double)); }},
{{"af", "sin", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return sin(x); })},
{{"af", "sin", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return sin(x); })},
{{"af", "cos", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return cos(x); })},
{{"af", "cos", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return cos(x); })},
{{"af", "tan", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return tan(x); })},
{{"af", "tan", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return tan(x); })},
{{"af", "asin", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return asin(x); })},
{{"af", "asin", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return asin(x); })},
{{"af", "acos", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return acos(x); })},
{{"af", "acos", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return acos(x); })},
{{"af", "atan", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return atan(x); })},
{{"af", "atan", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return atan(x); })},
{{"af", "sinh", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return sinh(x); })},
{{"af", "sinh", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return sinh(x); })},
{{"af", "cosh", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return cosh(x); })},
{{"af", "cosh", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return cosh(x); })},
{{"af", "tanh", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return tanh(x); })},
{{"af", "tanh", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return tanh(x); })},
{{"af", "asinh", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return asinh(x); })},
{{"af", "asinh", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return asinh(x); })},
{{"af", "acosh", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return acosh(x); })},
{{"af", "acosh", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return acosh(x); })},
{{"af", "atanh", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return atanh(x); })},
{{"af", "atanh", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return atanh(x); })},
{{"af", "log", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return log(x); })},
{{"af", "log", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return log(x); })},
{{"af", "log2", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return log2(x); })},
{{"af", "log2", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return log2(x); })},
{{"af", "log10", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return log10(x); })},
{{"af", "log10", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return log10(x); })},
{{"af", "exp", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return exp(x); })},
{{"af", "exp", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return exp(x); })},
{{"af", "exp2", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return exp2(x); })},
{{"af", "exp2", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return exp2(x); })},
{{"af", "exp10", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return exp10(x); })},
{{"af", "exp10", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return exp10(x); })},
{{"af", "sqrt", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return sqrt(x); })},
{{"af", "sqrt", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return sqrt(x); })},
{{"af", "pow3.5", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return pow(x, 3.5); })},
{{"af", "pow3.5", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return pow(x, 3.5); })},
{{"af", "pow13", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return pow(x, 13); })},
{{"af", "pow13", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return pow(x, 13); })},
{{"af", "memcpy", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return x; })},
{{"af", "memcpy", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return x; })},
{{"af", "memset", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return Vec4d{0.0}; })},
{{"af", "memset", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return Vec8d{0.0}; })},
{{"eigen", "cos", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).cos(); }},
{{"eigen", "sin", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).sin(); }},
{{"eigen", "tan", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).tan(); }},
{{"eigen", "cosh", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).cosh(); }},
{{"eigen", "sinh", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).sinh(); }},
{{"eigen", "tanh", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).tanh(); }},
{{"eigen", "exp", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).exp(); }},
{{"eigen", "log", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).log(); }},
{{"eigen", "log10", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).log10(); }},
{{"eigen", "pow3.5", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).pow(3.5); }},
{{"eigen", "pow13", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).pow(13); }},
{{"eigen", "asin", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).asin(); }},
{{"eigen", "acos", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).acos(); }},
{{"eigen", "atan", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).atan(); }},
{{"eigen", "asinh", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).asinh(); }},
{{"eigen", "acosh", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).acosh(); }},
{{"eigen", "atanh", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).atanh(); }},
{{"eigen", "erf", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).erf(); }},
{{"eigen", "erfc", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).erfc(); }},
{{"eigen", "lgamma", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).lgamma(); }},
{{"eigen", "digamma", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).digamma(); }},
{{"eigen", "ndtri", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).ndtri(); }},
{{"eigen", "sqrt", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).sqrt(); }},
{{"eigen", "rsqrt", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).rsqrt(); }}
};

std::unordered_map<function_key, multi_eval_func<float>> &get_float_funs() { return funcs_float; }
std::unordered_map<function_key, multi_eval_func<double>> &get_double_funs() { return funcs_double; }
}
