#include <sf_benchmarks.hpp>
#include <sf_libraries.hpp>
namespace sf::functions {
std::unordered_map<function_key, multi_eval_func<float>> funcs_float = {
{{"stl", "sin", 1 }, scalar_func_map<float>([](float x) -> float { return std::sin(x); })},
{{"stl", "cos", 1 }, scalar_func_map<float>([](float x) -> float { return std::cos(x); })},
{{"stl", "tan", 1 }, scalar_func_map<float>([](float x) -> float { return std::tan(x); })},
{{"stl", "asin", 1 }, scalar_func_map<float>([](float x) -> float { return std::asin(x); })},
{{"stl", "acos", 1 }, scalar_func_map<float>([](float x) -> float { return std::acos(x); })},
{{"stl", "atan", 1 }, scalar_func_map<float>([](float x) -> float { return std::atan(x); })},
{{"stl", "sinh", 1 }, scalar_func_map<float>([](float x) -> float { return std::sinh(x); })},
{{"stl", "cosh", 1 }, scalar_func_map<float>([](float x) -> float { return std::cosh(x); })},
{{"stl", "tanh", 1 }, scalar_func_map<float>([](float x) -> float { return std::tanh(x); })},
{{"stl", "asinh", 1 }, scalar_func_map<float>([](float x) -> float { return std::asinh(x); })},
{{"stl", "acosh", 1 }, scalar_func_map<float>([](float x) -> float { return std::acosh(x); })},
{{"stl", "atanh", 1 }, scalar_func_map<float>([](float x) -> float { return std::atanh(x); })},
{{"stl", "tgamma", 1 }, scalar_func_map<float>([](float x) -> float { return std::tgamma(x); })},
{{"stl", "lgamma", 1 }, scalar_func_map<float>([](float x) -> float { return std::lgamma(x); })},
{{"stl", "erf", 1 }, scalar_func_map<float>([](float x) -> float { return std::erf(x); })},
{{"stl", "erfc", 1 }, scalar_func_map<float>([](float x) -> float { return std::erfc(x); })},
{{"stl", "log", 1 }, scalar_func_map<float>([](float x) -> float { return std::log(x); })},
{{"stl", "log2", 1 }, scalar_func_map<float>([](float x) -> float { return std::log2(x); })},
{{"stl", "log10", 1 }, scalar_func_map<float>([](float x) -> float { return std::log10(x); })},
{{"stl", "exp", 1 }, scalar_func_map<float>([](float x) -> float { return std::exp(x); })},
{{"stl", "exp2", 1 }, scalar_func_map<float>([](float x) -> float { return std::exp2(x); })},
{{"stl", "exp10", 1 }, scalar_func_map<float>([](float x) -> float { return exp10(x); })},
{{"stl", "sqrt", 1 }, scalar_func_map<float>([](float x) -> float { return std::sqrt(x); })},
{{"stl", "pow3.5", 1 }, scalar_func_map<float>([](float x) -> float { return std::pow(x, 3.5); })},
{{"stl", "pow13", 1 }, scalar_func_map<float>([](float x) -> float { return std::pow(x, 13); })},
{{"stl", "memset", 1 }, [](const float *src, float *dst, size_t N) { std::memset(dst, 0, N * sizeof(float)); }},
{{"stl", "memcpy", 1 }, [](const float *src, float *dst, size_t N) { std::memcpy(dst, src, N * sizeof(float)); }},
{{"boost", "sin_pi", 1 }, scalar_func_map<float>([](float x) -> float { return ::boost::math::sin_pi(x); })},
{{"boost", "sinc_pi", 1 }, scalar_func_map<float>([](float x) -> float { return ::boost::math::sinc_pi(x); })},
{{"boost", "cos_pi", 1 }, scalar_func_map<float>([](float x) -> float { return ::boost::math::cos_pi(x); })},
{{"boost", "tgamma", 1 }, scalar_func_map<float>([](float x) -> float { return ::boost::math::tgamma(x); })},
{{"boost", "lgamma", 1 }, scalar_func_map<float>([](float x) -> float { return ::boost::math::lgamma(x); })},
{{"boost", "digamma", 1 }, scalar_func_map<float>([](float x) -> float { return ::boost::math::digamma(x); })},
{{"boost", "erf", 1 }, scalar_func_map<float>([](float x) -> float { return ::boost::math::erf(x); })},
{{"boost", "erfc", 1 }, scalar_func_map<float>([](float x) -> float { return ::boost::math::erfc(x); })},
{{"boost", "pow13", 1 }, scalar_func_map<float>([](float x) -> float { return ::boost::math::pow<13>(x); })},
{{"boost", "bessel_Y0", 1 }, scalar_func_map<float>([](float x) -> float { return ::boost::math::cyl_neumann(0, x); })},
{{"boost", "bessel_Y1", 1 }, scalar_func_map<float>([](float x) -> float { return ::boost::math::cyl_neumann(1, x); })},
{{"boost", "bessel_Y2", 1 }, scalar_func_map<float>([](float x) -> float { return ::boost::math::cyl_neumann(2, x); })},
{{"boost", "bessel_I0", 1 }, scalar_func_map<float>([](float x) -> float { return ::boost::math::cyl_bessel_i(0, x); })},
{{"boost", "bessel_I1", 1 }, scalar_func_map<float>([](float x) -> float { return ::boost::math::cyl_bessel_i(1, x); })},
{{"boost", "bessel_I2", 1 }, scalar_func_map<float>([](float x) -> float { return ::boost::math::cyl_bessel_i(2, x); })},
{{"boost", "bessel_J0", 1 }, scalar_func_map<float>([](float x) -> float { return ::boost::math::cyl_bessel_j(0, x); })},
{{"boost", "bessel_J1", 1 }, scalar_func_map<float>([](float x) -> float { return ::boost::math::cyl_bessel_j(1, x); })},
{{"boost", "bessel_J2", 1 }, scalar_func_map<float>([](float x) -> float { return ::boost::math::cyl_bessel_j(2, x); })},
{{"boost", "bessel_K0", 1 }, scalar_func_map<float>([](float x) -> float { return ::boost::math::cyl_bessel_k(0, x); })},
{{"boost", "bessel_K1", 1 }, scalar_func_map<float>([](float x) -> float { return ::boost::math::cyl_bessel_k(1, x); })},
{{"boost", "bessel_K2", 1 }, scalar_func_map<float>([](float x) -> float { return ::boost::math::cyl_bessel_k(2, x); })},
{{"boost", "bessel_j0", 1 }, scalar_func_map<float>([](float x) -> float { return ::boost::math::sph_bessel(0, x); })},
{{"boost", "bessel_j1", 1 }, scalar_func_map<float>([](float x) -> float { return ::boost::math::sph_bessel(1, x); })},
{{"boost", "bessel_j2", 1 }, scalar_func_map<float>([](float x) -> float { return ::boost::math::sph_bessel(2, x); })},
{{"boost", "bessel_y0", 1 }, scalar_func_map<float>([](float x) -> float { return ::boost::math::sph_neumann(0, x); })},
{{"boost", "bessel_y1", 1 }, scalar_func_map<float>([](float x) -> float { return ::boost::math::sph_neumann(1, x); })},
{{"boost", "bessel_y2", 1 }, scalar_func_map<float>([](float x) -> float { return ::boost::math::sph_neumann(2, x); })},
{{"boost", "hermite_0", 1 }, scalar_func_map<float>([](float x) -> float { return ::boost::math::hermite(0, x); })},
{{"boost", "hermite_1", 1 }, scalar_func_map<float>([](float x) -> float { return ::boost::math::hermite(1, x); })},
{{"boost", "hermite_2", 1 }, scalar_func_map<float>([](float x) -> float { return ::boost::math::hermite(2, x); })},
{{"boost", "hermite_3", 1 }, scalar_func_map<float>([](float x) -> float { return ::boost::math::hermite(3, x); })},
{{"boost", "riemann_zeta", 1 }, scalar_func_map<float>([](float x) -> float { return ::boost::math::zeta(x); })},
{{"agnerfog", "sin", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return sin(x); })},
{{"agnerfog", "sin", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return sin(x); })},
{{"agnerfog", "cos", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return cos(x); })},
{{"agnerfog", "cos", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return cos(x); })},
{{"agnerfog", "tan", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return tan(x); })},
{{"agnerfog", "tan", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return tan(x); })},
{{"agnerfog", "asin", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return asin(x); })},
{{"agnerfog", "asin", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return asin(x); })},
{{"agnerfog", "acos", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return acos(x); })},
{{"agnerfog", "acos", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return acos(x); })},
{{"agnerfog", "atan", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return atan(x); })},
{{"agnerfog", "atan", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return atan(x); })},
{{"agnerfog", "sinh", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return sinh(x); })},
{{"agnerfog", "sinh", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return sinh(x); })},
{{"agnerfog", "cosh", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return cosh(x); })},
{{"agnerfog", "cosh", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return cosh(x); })},
{{"agnerfog", "tanh", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return tanh(x); })},
{{"agnerfog", "tanh", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return tanh(x); })},
{{"agnerfog", "asinh", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return asinh(x); })},
{{"agnerfog", "asinh", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return asinh(x); })},
{{"agnerfog", "acosh", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return acosh(x); })},
{{"agnerfog", "acosh", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return acosh(x); })},
{{"agnerfog", "atanh", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return atanh(x); })},
{{"agnerfog", "atanh", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return atanh(x); })},
{{"agnerfog", "log", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return log(x); })},
{{"agnerfog", "log", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return log(x); })},
{{"agnerfog", "log2", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return log2(x); })},
{{"agnerfog", "log2", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return log2(x); })},
{{"agnerfog", "log10", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return log10(x); })},
{{"agnerfog", "log10", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return log10(x); })},
{{"agnerfog", "exp", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return exp(x); })},
{{"agnerfog", "exp", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return exp(x); })},
{{"agnerfog", "exp2", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return exp2(x); })},
{{"agnerfog", "exp2", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return exp2(x); })},
{{"agnerfog", "exp10", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return exp10(x); })},
{{"agnerfog", "exp10", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return exp10(x); })},
{{"agnerfog", "sqrt", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return sqrt(x); })},
{{"agnerfog", "sqrt", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return sqrt(x); })},
{{"agnerfog", "pow3.5", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return pow(x, 3.5); })},
{{"agnerfog", "pow3.5", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return pow(x, 3.5); })},
{{"agnerfog", "pow13", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return pow(x, 13); })},
{{"agnerfog", "pow13", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return pow(x, 13); })},
{{"agnerfog", "memcpy", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return x; })},
{{"agnerfog", "memcpy", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return x; })},
{{"agnerfog", "memset", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return Vec8f{0.0}; })},
{{"agnerfog", "memset", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return Vec16f{0.0}; })},
{{"eigen", "cos", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).cos(); }},
{{"eigen", "sin", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).sin(); }},
{{"eigen", "tan", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).tan(); }},
{{"eigen", "cosh", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).cosh(); }},
{{"eigen", "sinh", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).sinh(); }},
{{"eigen", "tanh", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).tanh(); }},
{{"eigen", "exp", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).exp(); }},
{{"eigen", "log", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).log(); }},
{{"eigen", "log10", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).log10(); }},
{{"eigen", "pow3.5", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).pow(3.5); }},
{{"eigen", "pow13", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).pow(13); }},
{{"eigen", "asin", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).asin(); }},
{{"eigen", "acos", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).acos(); }},
{{"eigen", "atan", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).atan(); }},
{{"eigen", "asinh", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).asinh(); }},
{{"eigen", "acosh", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).acosh(); }},
{{"eigen", "atanh", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).atanh(); }},
{{"eigen", "erf", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).erf(); }},
{{"eigen", "erfc", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).erfc(); }},
{{"eigen", "lgamma", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).lgamma(); }},
{{"eigen", "digamma", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).digamma(); }},
{{"eigen", "ndtri", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).ndtri(); }},
{{"eigen", "sqrt", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).sqrt(); }},
{{"eigen", "rsqrt", 0 }, [](const float *src, float *dst, size_t N) { Eigen::Map<Eigen::ArrayX<float>>(dst, N) = Eigen::Map<Eigen::ArrayX<float>>(dst, N).rsqrt(); }},
{{"sleef", "sin_pi", 1 }, scalar_func_map<float>([](float x) -> float { return Sleef_sinpif1_u05purecfma(x); })},
{{"sleef", "sin_pi", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return Sleef_sinpif8_u05avx2(x); })},
{{"sleef", "sin_pi", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return Sleef_sinpif16_u05avx512f(x); })},
{{"sleef", "cos_pi", 1 }, scalar_func_map<float>([](float x) -> float { return Sleef_cospif1_u05purecfma(x); })},
{{"sleef", "cos_pi", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return Sleef_cospif8_u05avx2(x); })},
{{"sleef", "cos_pi", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return Sleef_cospif16_u05avx512f(x); })},
{{"sleef", "sin", 1 }, scalar_func_map<float>([](float x) -> float { return Sleef_sinf1_u10purecfma(x); })},
{{"sleef", "sin", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return Sleef_sinf8_u10avx2(x); })},
{{"sleef", "sin", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return Sleef_sinf16_u10avx512f(x); })},
{{"sleef", "cos", 1 }, scalar_func_map<float>([](float x) -> float { return Sleef_cosf1_u10purecfma(x); })},
{{"sleef", "cos", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return Sleef_cosf8_u10avx2(x); })},
{{"sleef", "cos", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return Sleef_cosf16_u10avx512f(x); })},
{{"sleef", "tan", 1 }, scalar_func_map<float>([](float x) -> float { return Sleef_tanf1_u10purecfma(x); })},
{{"sleef", "tan", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return Sleef_tanf8_u10avx2(x); })},
{{"sleef", "tan", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return Sleef_tanf16_u10avx512f(x); })},
{{"sleef", "sinh", 1 }, scalar_func_map<float>([](float x) -> float { return Sleef_sinhf1_u10purecfma(x); })},
{{"sleef", "sinh", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return Sleef_sinhf8_u10avx2(x); })},
{{"sleef", "sinh", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return Sleef_sinhf16_u10avx512f(x); })},
{{"sleef", "cosh", 1 }, scalar_func_map<float>([](float x) -> float { return Sleef_coshf1_u10purecfma(x); })},
{{"sleef", "cosh", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return Sleef_coshf8_u10avx2(x); })},
{{"sleef", "cosh", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return Sleef_coshf16_u10avx512f(x); })},
{{"sleef", "tanh", 1 }, scalar_func_map<float>([](float x) -> float { return Sleef_tanhf1_u10purecfma(x); })},
{{"sleef", "tanh", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return Sleef_tanhf8_u10avx2(x); })},
{{"sleef", "tanh", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return Sleef_tanhf16_u10avx512f(x); })},
{{"sleef", "asin", 1 }, scalar_func_map<float>([](float x) -> float { return Sleef_asinf1_u10purecfma(x); })},
{{"sleef", "asin", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return Sleef_asinf8_u10avx2(x); })},
{{"sleef", "asin", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return Sleef_asinf16_u10avx512f(x); })},
{{"sleef", "acos", 1 }, scalar_func_map<float>([](float x) -> float { return Sleef_acosf1_u10purecfma(x); })},
{{"sleef", "acos", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return Sleef_acosf8_u10avx2(x); })},
{{"sleef", "acos", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return Sleef_acosf16_u10avx512f(x); })},
{{"sleef", "atan", 1 }, scalar_func_map<float>([](float x) -> float { return Sleef_atanf1_u10purecfma(x); })},
{{"sleef", "atan", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return Sleef_atanf8_u10avx2(x); })},
{{"sleef", "atan", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return Sleef_atanf16_u10avx512f(x); })},
{{"sleef", "asinh", 1 }, scalar_func_map<float>([](float x) -> float { return Sleef_asinhf1_u10purecfma(x); })},
{{"sleef", "asinh", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return Sleef_asinhf8_u10avx2(x); })},
{{"sleef", "asinh", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return Sleef_asinhf16_u10avx512f(x); })},
{{"sleef", "acosh", 1 }, scalar_func_map<float>([](float x) -> float { return Sleef_acoshf1_u10purecfma(x); })},
{{"sleef", "acosh", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return Sleef_acoshf8_u10avx2(x); })},
{{"sleef", "acosh", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return Sleef_acoshf16_u10avx512f(x); })},
{{"sleef", "atanh", 1 }, scalar_func_map<float>([](float x) -> float { return Sleef_atanhf1_u10purecfma(x); })},
{{"sleef", "atanh", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return Sleef_atanhf8_u10avx2(x); })},
{{"sleef", "atanh", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return Sleef_atanhf16_u10avx512f(x); })},
{{"sleef", "log", 1 }, scalar_func_map<float>([](float x) -> float { return Sleef_logf1_u10purecfma(x); })},
{{"sleef", "log", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return Sleef_logf8_u10avx2(x); })},
{{"sleef", "log", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return Sleef_logf16_u10avx512f(x); })},
{{"sleef", "log2", 1 }, scalar_func_map<float>([](float x) -> float { return Sleef_log2f1_u10purecfma(x); })},
{{"sleef", "log2", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return Sleef_log2f8_u10avx2(x); })},
{{"sleef", "log2", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return Sleef_log2f16_u10avx512f(x); })},
{{"sleef", "log10", 1 }, scalar_func_map<float>([](float x) -> float { return Sleef_log10f1_u10purecfma(x); })},
{{"sleef", "log10", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return Sleef_log10f8_u10avx2(x); })},
{{"sleef", "log10", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return Sleef_log10f16_u10avx512f(x); })},
{{"sleef", "exp", 1 }, scalar_func_map<float>([](float x) -> float { return Sleef_expf1_u10purecfma(x); })},
{{"sleef", "exp", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return Sleef_expf8_u10avx2(x); })},
{{"sleef", "exp", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return Sleef_expf16_u10avx512f(x); })},
{{"sleef", "exp2", 1 }, scalar_func_map<float>([](float x) -> float { return Sleef_exp2f1_u10purecfma(x); })},
{{"sleef", "exp2", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return Sleef_exp2f8_u10avx2(x); })},
{{"sleef", "exp2", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return Sleef_exp2f16_u10avx512f(x); })},
{{"sleef", "exp10", 1 }, scalar_func_map<float>([](float x) -> float { return Sleef_exp10f1_u10purecfma(x); })},
{{"sleef", "exp10", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return Sleef_exp10f8_u10avx2(x); })},
{{"sleef", "exp10", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return Sleef_exp10f16_u10avx512f(x); })},
{{"sleef", "erf", 1 }, scalar_func_map<float>([](float x) -> float { return Sleef_erff1_u10purecfma(x); })},
{{"sleef", "erf", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return Sleef_erff8_u10avx2(x); })},
{{"sleef", "erf", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return Sleef_erff16_u10avx512f(x); })},
{{"sleef", "erfc", 1 }, scalar_func_map<float>([](float x) -> float { return Sleef_erfcf1_u15purecfma(x); })},
{{"sleef", "erfc", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return Sleef_erfcf8_u15avx2(x); })},
{{"sleef", "erfc", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return Sleef_erfcf16_u15avx512f(x); })},
{{"sleef", "lgamma", 1 }, scalar_func_map<float>([](float x) -> float { return Sleef_lgammaf1_u10purecfma(x); })},
{{"sleef", "lgamma", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return Sleef_lgammaf8_u10avx2(x); })},
{{"sleef", "lgamma", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return Sleef_lgammaf16_u10avx512f(x); })},
{{"sleef", "tgamma", 1 }, scalar_func_map<float>([](float x) -> float { return Sleef_tgammaf1_u10purecfma(x); })},
{{"sleef", "tgamma", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return Sleef_tgammaf8_u10avx2(x); })},
{{"sleef", "tgamma", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return Sleef_tgammaf16_u10avx512f(x); })},
{{"sleef", "sqrt", 1 }, scalar_func_map<float>([](float x) -> float { return Sleef_sqrtf1_u05purecfma(x); })},
{{"sleef", "sqrt", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return Sleef_sqrtf8_u05avx2(x); })},
{{"sleef", "sqrt", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return Sleef_sqrtf16_u05avx512f(x); })},
{{"sleef", "pow3.5", 1 }, scalar_func_map<float>([](float x) -> float { return Sleef_powf1_u10purecfma(x, 3.5); })},
{{"sleef", "pow3.5", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return Sleef_powf8_u10avx2(x, Vec8f{3.5}); })},
{{"sleef", "pow3.5", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return Sleef_powf16_u10avx512f(x, Vec16f{3.5}); })},
{{"sleef", "pow13", 1 }, scalar_func_map<float>([](float x) -> float { return Sleef_powf1_u10purecfma(x, 13.0); })},
{{"sleef", "pow13", 8 }, vec_func_map<Vec8f, float>([](Vec8f x) -> Vec8f { return Sleef_powf8_u10avx2(x, Vec8f{13.0}); })},
{{"sleef", "pow13", 16 }, vec_func_map<Vec16f, float>([](Vec16f x) -> Vec16f { return Sleef_powf16_u10avx512f(x, Vec16f{13.0}); })}
};

std::unordered_map<function_key, multi_eval_func<double>> funcs_double = {
{{"stl", "sin", 1 }, scalar_func_map<double>([](double x) -> double { return std::sin(x); })},
{{"stl", "cos", 1 }, scalar_func_map<double>([](double x) -> double { return std::cos(x); })},
{{"stl", "tan", 1 }, scalar_func_map<double>([](double x) -> double { return std::tan(x); })},
{{"stl", "asin", 1 }, scalar_func_map<double>([](double x) -> double { return std::asin(x); })},
{{"stl", "acos", 1 }, scalar_func_map<double>([](double x) -> double { return std::acos(x); })},
{{"stl", "atan", 1 }, scalar_func_map<double>([](double x) -> double { return std::atan(x); })},
{{"stl", "sinh", 1 }, scalar_func_map<double>([](double x) -> double { return std::sinh(x); })},
{{"stl", "cosh", 1 }, scalar_func_map<double>([](double x) -> double { return std::cosh(x); })},
{{"stl", "tanh", 1 }, scalar_func_map<double>([](double x) -> double { return std::tanh(x); })},
{{"stl", "asinh", 1 }, scalar_func_map<double>([](double x) -> double { return std::asinh(x); })},
{{"stl", "acosh", 1 }, scalar_func_map<double>([](double x) -> double { return std::acosh(x); })},
{{"stl", "atanh", 1 }, scalar_func_map<double>([](double x) -> double { return std::atanh(x); })},
{{"stl", "tgamma", 1 }, scalar_func_map<double>([](double x) -> double { return std::tgamma(x); })},
{{"stl", "lgamma", 1 }, scalar_func_map<double>([](double x) -> double { return std::lgamma(x); })},
{{"stl", "erf", 1 }, scalar_func_map<double>([](double x) -> double { return std::erf(x); })},
{{"stl", "erfc", 1 }, scalar_func_map<double>([](double x) -> double { return std::erfc(x); })},
{{"stl", "log", 1 }, scalar_func_map<double>([](double x) -> double { return std::log(x); })},
{{"stl", "log2", 1 }, scalar_func_map<double>([](double x) -> double { return std::log2(x); })},
{{"stl", "log10", 1 }, scalar_func_map<double>([](double x) -> double { return std::log10(x); })},
{{"stl", "exp", 1 }, scalar_func_map<double>([](double x) -> double { return std::exp(x); })},
{{"stl", "exp2", 1 }, scalar_func_map<double>([](double x) -> double { return std::exp2(x); })},
{{"stl", "exp10", 1 }, scalar_func_map<double>([](double x) -> double { return exp10(x); })},
{{"stl", "sqrt", 1 }, scalar_func_map<double>([](double x) -> double { return std::sqrt(x); })},
{{"stl", "pow3.5", 1 }, scalar_func_map<double>([](double x) -> double { return std::pow(x, 3.5); })},
{{"stl", "pow13", 1 }, scalar_func_map<double>([](double x) -> double { return std::pow(x, 13); })},
{{"stl", "memset", 1 }, [](const double *src, double *dst, size_t N) { std::memset(dst, 0, N * sizeof(double)); }},
{{"stl", "memcpy", 1 }, [](const double *src, double *dst, size_t N) { std::memcpy(dst, src, N * sizeof(double)); }},
{{"boost", "sin_pi", 1 }, scalar_func_map<double>([](double x) -> double { return ::boost::math::sin_pi(x); })},
{{"boost", "sinc_pi", 1 }, scalar_func_map<double>([](double x) -> double { return ::boost::math::sinc_pi(x); })},
{{"boost", "cos_pi", 1 }, scalar_func_map<double>([](double x) -> double { return ::boost::math::cos_pi(x); })},
{{"boost", "tgamma", 1 }, scalar_func_map<double>([](double x) -> double { return ::boost::math::tgamma(x); })},
{{"boost", "lgamma", 1 }, scalar_func_map<double>([](double x) -> double { return ::boost::math::lgamma(x); })},
{{"boost", "digamma", 1 }, scalar_func_map<double>([](double x) -> double { return ::boost::math::digamma(x); })},
{{"boost", "erf", 1 }, scalar_func_map<double>([](double x) -> double { return ::boost::math::erf(x); })},
{{"boost", "erfc", 1 }, scalar_func_map<double>([](double x) -> double { return ::boost::math::erfc(x); })},
{{"boost", "pow13", 1 }, scalar_func_map<double>([](double x) -> double { return ::boost::math::pow<13>(x); })},
{{"boost", "bessel_Y0", 1 }, scalar_func_map<double>([](double x) -> double { return ::boost::math::cyl_neumann(0, x); })},
{{"boost", "bessel_Y1", 1 }, scalar_func_map<double>([](double x) -> double { return ::boost::math::cyl_neumann(1, x); })},
{{"boost", "bessel_Y2", 1 }, scalar_func_map<double>([](double x) -> double { return ::boost::math::cyl_neumann(2, x); })},
{{"boost", "bessel_I0", 1 }, scalar_func_map<double>([](double x) -> double { return ::boost::math::cyl_bessel_i(0, x); })},
{{"boost", "bessel_I1", 1 }, scalar_func_map<double>([](double x) -> double { return ::boost::math::cyl_bessel_i(1, x); })},
{{"boost", "bessel_I2", 1 }, scalar_func_map<double>([](double x) -> double { return ::boost::math::cyl_bessel_i(2, x); })},
{{"boost", "bessel_J0", 1 }, scalar_func_map<double>([](double x) -> double { return ::boost::math::cyl_bessel_j(0, x); })},
{{"boost", "bessel_J1", 1 }, scalar_func_map<double>([](double x) -> double { return ::boost::math::cyl_bessel_j(1, x); })},
{{"boost", "bessel_J2", 1 }, scalar_func_map<double>([](double x) -> double { return ::boost::math::cyl_bessel_j(2, x); })},
{{"boost", "bessel_K0", 1 }, scalar_func_map<double>([](double x) -> double { return ::boost::math::cyl_bessel_k(0, x); })},
{{"boost", "bessel_K1", 1 }, scalar_func_map<double>([](double x) -> double { return ::boost::math::cyl_bessel_k(1, x); })},
{{"boost", "bessel_K2", 1 }, scalar_func_map<double>([](double x) -> double { return ::boost::math::cyl_bessel_k(2, x); })},
{{"boost", "bessel_j0", 1 }, scalar_func_map<double>([](double x) -> double { return ::boost::math::sph_bessel(0, x); })},
{{"boost", "bessel_j1", 1 }, scalar_func_map<double>([](double x) -> double { return ::boost::math::sph_bessel(1, x); })},
{{"boost", "bessel_j2", 1 }, scalar_func_map<double>([](double x) -> double { return ::boost::math::sph_bessel(2, x); })},
{{"boost", "bessel_y0", 1 }, scalar_func_map<double>([](double x) -> double { return ::boost::math::sph_neumann(0, x); })},
{{"boost", "bessel_y1", 1 }, scalar_func_map<double>([](double x) -> double { return ::boost::math::sph_neumann(1, x); })},
{{"boost", "bessel_y2", 1 }, scalar_func_map<double>([](double x) -> double { return ::boost::math::sph_neumann(2, x); })},
{{"boost", "hermite_0", 1 }, scalar_func_map<double>([](double x) -> double { return ::boost::math::hermite(0, x); })},
{{"boost", "hermite_1", 1 }, scalar_func_map<double>([](double x) -> double { return ::boost::math::hermite(1, x); })},
{{"boost", "hermite_2", 1 }, scalar_func_map<double>([](double x) -> double { return ::boost::math::hermite(2, x); })},
{{"boost", "hermite_3", 1 }, scalar_func_map<double>([](double x) -> double { return ::boost::math::hermite(3, x); })},
{{"boost", "riemann_zeta", 1 }, scalar_func_map<double>([](double x) -> double { return ::boost::math::zeta(x); })},
{{"agnerfog", "sin", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return sin(x); })},
{{"agnerfog", "sin", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return sin(x); })},
{{"agnerfog", "cos", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return cos(x); })},
{{"agnerfog", "cos", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return cos(x); })},
{{"agnerfog", "tan", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return tan(x); })},
{{"agnerfog", "tan", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return tan(x); })},
{{"agnerfog", "asin", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return asin(x); })},
{{"agnerfog", "asin", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return asin(x); })},
{{"agnerfog", "acos", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return acos(x); })},
{{"agnerfog", "acos", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return acos(x); })},
{{"agnerfog", "atan", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return atan(x); })},
{{"agnerfog", "atan", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return atan(x); })},
{{"agnerfog", "sinh", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return sinh(x); })},
{{"agnerfog", "sinh", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return sinh(x); })},
{{"agnerfog", "cosh", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return cosh(x); })},
{{"agnerfog", "cosh", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return cosh(x); })},
{{"agnerfog", "tanh", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return tanh(x); })},
{{"agnerfog", "tanh", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return tanh(x); })},
{{"agnerfog", "asinh", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return asinh(x); })},
{{"agnerfog", "asinh", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return asinh(x); })},
{{"agnerfog", "acosh", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return acosh(x); })},
{{"agnerfog", "acosh", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return acosh(x); })},
{{"agnerfog", "atanh", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return atanh(x); })},
{{"agnerfog", "atanh", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return atanh(x); })},
{{"agnerfog", "log", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return log(x); })},
{{"agnerfog", "log", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return log(x); })},
{{"agnerfog", "log2", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return log2(x); })},
{{"agnerfog", "log2", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return log2(x); })},
{{"agnerfog", "log10", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return log10(x); })},
{{"agnerfog", "log10", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return log10(x); })},
{{"agnerfog", "exp", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return exp(x); })},
{{"agnerfog", "exp", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return exp(x); })},
{{"agnerfog", "exp2", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return exp2(x); })},
{{"agnerfog", "exp2", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return exp2(x); })},
{{"agnerfog", "exp10", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return exp10(x); })},
{{"agnerfog", "exp10", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return exp10(x); })},
{{"agnerfog", "sqrt", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return sqrt(x); })},
{{"agnerfog", "sqrt", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return sqrt(x); })},
{{"agnerfog", "pow3.5", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return pow(x, 3.5); })},
{{"agnerfog", "pow3.5", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return pow(x, 3.5); })},
{{"agnerfog", "pow13", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return pow(x, 13); })},
{{"agnerfog", "pow13", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return pow(x, 13); })},
{{"agnerfog", "memcpy", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return x; })},
{{"agnerfog", "memcpy", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return x; })},
{{"agnerfog", "memset", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return Vec4d{0.0}; })},
{{"agnerfog", "memset", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return Vec8d{0.0}; })},
{{"eigen", "cos", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).cos(); }},
{{"eigen", "sin", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).sin(); }},
{{"eigen", "tan", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).tan(); }},
{{"eigen", "cosh", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).cosh(); }},
{{"eigen", "sinh", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).sinh(); }},
{{"eigen", "tanh", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).tanh(); }},
{{"eigen", "exp", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).exp(); }},
{{"eigen", "log", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).log(); }},
{{"eigen", "log10", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).log10(); }},
{{"eigen", "pow3.5", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).pow(3.5); }},
{{"eigen", "pow13", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).pow(13); }},
{{"eigen", "asin", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).asin(); }},
{{"eigen", "acos", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).acos(); }},
{{"eigen", "atan", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).atan(); }},
{{"eigen", "asinh", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).asinh(); }},
{{"eigen", "acosh", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).acosh(); }},
{{"eigen", "atanh", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).atanh(); }},
{{"eigen", "erf", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).erf(); }},
{{"eigen", "erfc", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).erfc(); }},
{{"eigen", "lgamma", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).lgamma(); }},
{{"eigen", "digamma", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).digamma(); }},
{{"eigen", "ndtri", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).ndtri(); }},
{{"eigen", "sqrt", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).sqrt(); }},
{{"eigen", "rsqrt", 0 }, [](const double *src, double *dst, size_t N) { Eigen::Map<Eigen::ArrayX<double>>(dst, N) = Eigen::Map<Eigen::ArrayX<double>>(dst, N).rsqrt(); }},
{{"gsl", "sin_pi", 1 }, scalar_func_map<double>([](double x) -> double { return gsl_sf_sin_pi(x); })},
{{"gsl", "cos_pi", 1 }, scalar_func_map<double>([](double x) -> double { return gsl_sf_cos_pi(x); })},
{{"gsl", "sin", 1 }, scalar_func_map<double>([](double x) -> double { return gsl_sf_sin(x); })},
{{"gsl", "cos", 1 }, scalar_func_map<double>([](double x) -> double { return gsl_sf_cos(x); })},
{{"gsl", "sinc", 1 }, scalar_func_map<double>([](double x) -> double { return gsl_sf_sinc(x / M_PI); })},
{{"gsl", "sinc_pi", 1 }, scalar_func_map<double>([](double x) -> double { return gsl_sf_sinc(x); })},
{{"gsl", "erf", 1 }, scalar_func_map<double>([](double x) -> double { return gsl_sf_erf(x); })},
{{"gsl", "erfc", 1 }, scalar_func_map<double>([](double x) -> double { return gsl_sf_erfc(x); })},
{{"gsl", "tgamma", 1 }, scalar_func_map<double>([](double x) -> double { return gsl_sf_gamma(x); })},
{{"gsl", "lgamma", 1 }, scalar_func_map<double>([](double x) -> double { return gsl_sf_lngamma(x); })},
{{"gsl", "log", 1 }, scalar_func_map<double>([](double x) -> double { return gsl_sf_log(x); })},
{{"gsl", "exp", 1 }, scalar_func_map<double>([](double x) -> double { return gsl_sf_exp(x); })},
{{"gsl", "pow13", 1 }, scalar_func_map<double>([](double x) -> double { return gsl_sf_pow_int(x, 13); })},
{{"gsl", "bessel_Y0", 1 }, scalar_func_map<double>([](double x) -> double { return gsl_sf_bessel_Y0(x); })},
{{"gsl", "bessel_Y1", 1 }, scalar_func_map<double>([](double x) -> double { return gsl_sf_bessel_Y1(x); })},
{{"gsl", "bessel_Y2", 1 }, scalar_func_map<double>([](double x) -> double { return gsl_sf_bessel_Yn(2, x); })},
{{"gsl", "bessel_I0", 1 }, scalar_func_map<double>([](double x) -> double { return gsl_sf_bessel_I0(x); })},
{{"gsl", "bessel_I1", 1 }, scalar_func_map<double>([](double x) -> double { return gsl_sf_bessel_I1(x); })},
{{"gsl", "bessel_I2", 1 }, scalar_func_map<double>([](double x) -> double { return gsl_sf_bessel_In(2, x); })},
{{"gsl", "bessel_J0", 1 }, scalar_func_map<double>([](double x) -> double { return gsl_sf_bessel_J0(x); })},
{{"gsl", "bessel_J1", 1 }, scalar_func_map<double>([](double x) -> double { return gsl_sf_bessel_J1(x); })},
{{"gsl", "bessel_J2", 1 }, scalar_func_map<double>([](double x) -> double { return gsl_sf_bessel_Jn(2, x); })},
{{"gsl", "bessel_K0", 1 }, scalar_func_map<double>([](double x) -> double { return gsl_sf_bessel_K0(x); })},
{{"gsl", "bessel_K1", 1 }, scalar_func_map<double>([](double x) -> double { return gsl_sf_bessel_K1(x); })},
{{"gsl", "bessel_K2", 1 }, scalar_func_map<double>([](double x) -> double { return gsl_sf_bessel_Kn(2, x); })},
{{"gsl", "bessel_j0", 1 }, scalar_func_map<double>([](double x) -> double { return gsl_sf_bessel_j0(x); })},
{{"gsl", "bessel_j1", 1 }, scalar_func_map<double>([](double x) -> double { return gsl_sf_bessel_j1(x); })},
{{"gsl", "bessel_j2", 1 }, scalar_func_map<double>([](double x) -> double { return gsl_sf_bessel_j2(x); })},
{{"gsl", "bessel_y0", 1 }, scalar_func_map<double>([](double x) -> double { return gsl_sf_bessel_y0(x); })},
{{"gsl", "bessel_y1", 1 }, scalar_func_map<double>([](double x) -> double { return gsl_sf_bessel_y1(x); })},
{{"gsl", "bessel_y2", 1 }, scalar_func_map<double>([](double x) -> double { return gsl_sf_bessel_y2(x); })},
{{"gsl", "hermite_0", 1 }, scalar_func_map<double>([](double x) -> double { return gsl_sf_hermite(0, x); })},
{{"gsl", "hermite_1", 1 }, scalar_func_map<double>([](double x) -> double { return gsl_sf_hermite(1, x); })},
{{"gsl", "hermite_2", 1 }, scalar_func_map<double>([](double x) -> double { return gsl_sf_hermite(2, x); })},
{{"gsl", "hermite_3", 1 }, scalar_func_map<double>([](double x) -> double { return gsl_sf_hermite(3, x); })},
{{"gsl", "riemann_zeta", 1 }, scalar_func_map<double>([](double x) -> double { return gsl_sf_zeta(x); })},
{{"sleef", "sin_pi", 1 }, scalar_func_map<double>([](double x) -> double { return Sleef_sinpid1_u05purecfma(x); })},
{{"sleef", "sin_pi", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return Sleef_sinpid4_u05avx2(x); })},
{{"sleef", "sin_pi", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return Sleef_sinpid8_u05avx512f(x); })},
{{"sleef", "cos_pi", 1 }, scalar_func_map<double>([](double x) -> double { return Sleef_cospid1_u05purecfma(x); })},
{{"sleef", "cos_pi", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return Sleef_cospid4_u05avx2(x); })},
{{"sleef", "cos_pi", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return Sleef_cospid8_u05avx512f(x); })},
{{"sleef", "sin", 1 }, scalar_func_map<double>([](double x) -> double { return Sleef_sind1_u10purecfma(x); })},
{{"sleef", "sin", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return Sleef_sind4_u10avx2(x); })},
{{"sleef", "sin", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return Sleef_sind8_u10avx512f(x); })},
{{"sleef", "cos", 1 }, scalar_func_map<double>([](double x) -> double { return Sleef_cosd1_u10purecfma(x); })},
{{"sleef", "cos", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return Sleef_cosd4_u10avx2(x); })},
{{"sleef", "cos", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return Sleef_cosd8_u10avx512f(x); })},
{{"sleef", "tan", 1 }, scalar_func_map<double>([](double x) -> double { return Sleef_tand1_u10purecfma(x); })},
{{"sleef", "tan", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return Sleef_tand4_u10avx2(x); })},
{{"sleef", "tan", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return Sleef_tand8_u10avx512f(x); })},
{{"sleef", "sinh", 1 }, scalar_func_map<double>([](double x) -> double { return Sleef_sinhd1_u10purecfma(x); })},
{{"sleef", "sinh", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return Sleef_sinhd4_u10avx2(x); })},
{{"sleef", "sinh", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return Sleef_sinhd8_u10avx512f(x); })},
{{"sleef", "cosh", 1 }, scalar_func_map<double>([](double x) -> double { return Sleef_coshd1_u10purecfma(x); })},
{{"sleef", "cosh", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return Sleef_coshd4_u10avx2(x); })},
{{"sleef", "cosh", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return Sleef_coshd8_u10avx512f(x); })},
{{"sleef", "tanh", 1 }, scalar_func_map<double>([](double x) -> double { return Sleef_tanhd1_u10purecfma(x); })},
{{"sleef", "tanh", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return Sleef_tanhd4_u10avx2(x); })},
{{"sleef", "tanh", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return Sleef_tanhd8_u10avx512f(x); })},
{{"sleef", "asin", 1 }, scalar_func_map<double>([](double x) -> double { return Sleef_asind1_u10purecfma(x); })},
{{"sleef", "asin", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return Sleef_asind4_u10avx2(x); })},
{{"sleef", "asin", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return Sleef_asind8_u10avx512f(x); })},
{{"sleef", "acos", 1 }, scalar_func_map<double>([](double x) -> double { return Sleef_acosd1_u10purecfma(x); })},
{{"sleef", "acos", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return Sleef_acosd4_u10avx2(x); })},
{{"sleef", "acos", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return Sleef_acosd8_u10avx512f(x); })},
{{"sleef", "atan", 1 }, scalar_func_map<double>([](double x) -> double { return Sleef_atand1_u10purecfma(x); })},
{{"sleef", "atan", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return Sleef_atand4_u10avx2(x); })},
{{"sleef", "atan", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return Sleef_atand8_u10avx512f(x); })},
{{"sleef", "asinh", 1 }, scalar_func_map<double>([](double x) -> double { return Sleef_asinhd1_u10purecfma(x); })},
{{"sleef", "asinh", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return Sleef_asinhd4_u10avx2(x); })},
{{"sleef", "asinh", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return Sleef_asinhd8_u10avx512f(x); })},
{{"sleef", "acosh", 1 }, scalar_func_map<double>([](double x) -> double { return Sleef_acoshd1_u10purecfma(x); })},
{{"sleef", "acosh", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return Sleef_acoshd4_u10avx2(x); })},
{{"sleef", "acosh", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return Sleef_acoshd8_u10avx512f(x); })},
{{"sleef", "atanh", 1 }, scalar_func_map<double>([](double x) -> double { return Sleef_atanhd1_u10purecfma(x); })},
{{"sleef", "atanh", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return Sleef_atanhd4_u10avx2(x); })},
{{"sleef", "atanh", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return Sleef_atanhd8_u10avx512f(x); })},
{{"sleef", "log", 1 }, scalar_func_map<double>([](double x) -> double { return Sleef_logd1_u10purecfma(x); })},
{{"sleef", "log", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return Sleef_logd4_u10avx2(x); })},
{{"sleef", "log", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return Sleef_logd8_u10avx512f(x); })},
{{"sleef", "log2", 1 }, scalar_func_map<double>([](double x) -> double { return Sleef_log2d1_u10purecfma(x); })},
{{"sleef", "log2", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return Sleef_log2d4_u10avx2(x); })},
{{"sleef", "log2", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return Sleef_log2d8_u10avx512f(x); })},
{{"sleef", "log10", 1 }, scalar_func_map<double>([](double x) -> double { return Sleef_log10d1_u10purecfma(x); })},
{{"sleef", "log10", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return Sleef_log10d4_u10avx2(x); })},
{{"sleef", "log10", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return Sleef_log10d8_u10avx512f(x); })},
{{"sleef", "exp", 1 }, scalar_func_map<double>([](double x) -> double { return Sleef_expd1_u10purecfma(x); })},
{{"sleef", "exp", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return Sleef_expd4_u10avx2(x); })},
{{"sleef", "exp", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return Sleef_expd8_u10avx512f(x); })},
{{"sleef", "exp2", 1 }, scalar_func_map<double>([](double x) -> double { return Sleef_exp2d1_u10purecfma(x); })},
{{"sleef", "exp2", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return Sleef_exp2d4_u10avx2(x); })},
{{"sleef", "exp2", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return Sleef_exp2d8_u10avx512f(x); })},
{{"sleef", "exp10", 1 }, scalar_func_map<double>([](double x) -> double { return Sleef_exp10d1_u10purecfma(x); })},
{{"sleef", "exp10", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return Sleef_exp10d4_u10avx2(x); })},
{{"sleef", "exp10", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return Sleef_exp10d8_u10avx512f(x); })},
{{"sleef", "erf", 1 }, scalar_func_map<double>([](double x) -> double { return Sleef_erfd1_u10purecfma(x); })},
{{"sleef", "erf", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return Sleef_erfd4_u10avx2(x); })},
{{"sleef", "erf", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return Sleef_erfd8_u10avx512f(x); })},
{{"sleef", "erfc", 1 }, scalar_func_map<double>([](double x) -> double { return Sleef_erfcd1_u15purecfma(x); })},
{{"sleef", "erfc", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return Sleef_erfcd4_u15avx2(x); })},
{{"sleef", "erfc", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return Sleef_erfcd8_u15avx512f(x); })},
{{"sleef", "lgamma", 1 }, scalar_func_map<double>([](double x) -> double { return Sleef_lgammad1_u10purecfma(x); })},
{{"sleef", "lgamma", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return Sleef_lgammad4_u10avx2(x); })},
{{"sleef", "lgamma", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return Sleef_lgammad8_u10avx512f(x); })},
{{"sleef", "tgamma", 1 }, scalar_func_map<double>([](double x) -> double { return Sleef_tgammad1_u10purecfma(x); })},
{{"sleef", "tgamma", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return Sleef_tgammad4_u10avx2(x); })},
{{"sleef", "tgamma", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return Sleef_tgammad8_u10avx512f(x); })},
{{"sleef", "sqrt", 1 }, scalar_func_map<double>([](double x) -> double { return Sleef_sqrtd1_u05purecfma(x); })},
{{"sleef", "sqrt", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return Sleef_sqrtd4_u05avx2(x); })},
{{"sleef", "sqrt", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return Sleef_sqrtd8_u05avx512f(x); })},
{{"sleef", "pow3.5", 1 }, scalar_func_map<double>([](double x) -> double { return Sleef_powd1_u10purecfma(x, 3.5); })},
{{"sleef", "pow3.5", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return Sleef_powd4_u10avx2(x, Vec4d{3.5}); })},
{{"sleef", "pow3.5", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return Sleef_powd8_u10avx512f(x, Vec8d{3.5}); })},
{{"sleef", "pow13", 1 }, scalar_func_map<double>([](double x) -> double { return Sleef_powd1_u10purecfma(x, 13.0); })},
{{"sleef", "pow13", 4 }, vec_func_map<Vec4d, double>([](Vec4d x) -> Vec4d { return Sleef_powd4_u10avx2(x, Vec4d{13.0}); })},
{{"sleef", "pow13", 8 }, vec_func_map<Vec8d, double>([](Vec8d x) -> Vec8d { return Sleef_powd8_u10avx512f(x, Vec8d{13.0}); })}
};

std::unordered_map<function_key, multi_eval_func<float>> &get_float_funs() { return funcs_float; }
std::unordered_map<function_key, multi_eval_func<double>> &get_double_funs() { return funcs_double; }
}
