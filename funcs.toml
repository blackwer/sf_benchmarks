[domains]
acos = [-1.0, 1.0]
acosh = [1.0, 1000.0]
asin = [-1.0, 1.0]
asinh = [-100.0, 100.0]
atan = [-100.0, 100.0]
atanh = [-1.0, 1.0]
bessel_I0 = [0.1, 30.0]
bessel_I1 = [0.1, 30.0]
bessel_I2 = [0.1, 30.0]
bessel_J0 = [0.1, 30.0]
bessel_J1 = [0.1, 30.0]
bessel_J2 = [0.1, 30.0]
bessel_K0 = [0.1, 30.0]
bessel_K1 = [0.1, 30.0]
bessel_K2 = [0.1, 30.0]
bessel_Y0 = [0.1, 30.0]
bessel_Y1 = [0.1, 30.0]
bessel_Y2 = [0.1, 30.0]
bessel_j0 = [0.1, 30.0]
bessel_j1 = [0.1, 30.0]
bessel_j2 = [0.1, 30.0]
bessel_y0 = [0.1, 30.0]
bessel_y1 = [0.1, 30.0]
bessel_y2 = [0.1, 30.0]
cos = [0.0, 6.283]
cos_pi = [0.0, 2.0]
cosh = [0.0, 1.0]
digamma = [0.0, 1.0]
erf = [-1.0, 1.0]
erfc = [-1.0, 1.0]
exp = [-1.0, 1.0]
exp10 = [-1.0, 1.0]
exp2 = [-1.0, 1.0]
#hank103 = [0.0, 10.0, .ilbound = 0.0, .iubound = 10.0]
hermite_0 = [0.0, 10.0]
hermite_1 = [0.0, 10.0]
hermite_2 = [0.0, 10.0]
hermite_3 = [0.0, 10.0]
lgamma = [0.0, 10.0]
log = [0.0, 10.0]
log10 = [0.0, 10.0]
log2 = [0.0, 10.0]
memcpy = [0.0, 1.0]
memset = [0.0, 1.0]
ndtri = [0.0, 1.0]
pow13 = [0.0, 1.0]
"pow3.5" = [0.0, 1.0]
riemann_zeta = [0.0, 10.0]
rsqrt = [0.0, 10.0]
sin = [0.0, 6.283]
sin_pi = [0.0, 2.0]
sinc = [0.0, 6.283]
sinc_pi = [0.0, 2.0]
sinh = [0.0, 2.0]
sqrt = [0.0, 10.0]
tan = [0.0, 6.283]
tanh = [-1.0, 1.0]
tgamma = [-0.0, 1.0]

[stl]
types = ["float", "double"]
instructions = ["x86_64"]

[stl.calltemplates]
sin = "std::sin(x)"
cos = "std::cos(x)"
tan = "std::tan(x)"
asin = "std::asin(x)"
acos = "std::acos(x)"
atan = "std::atan(x)"
sinh = "std::sinh(x)"
cosh = "std::cosh(x)"
tanh = "std::tanh(x)"
asinh = "std::asinh(x)"
acosh = "std::acosh(x)"
atanh = "std::atanh(x)"
tgamma = "std::tgamma(x)"
lgamma = "std::lgamma(x)"
erf = "std::erf(x)"
erfc = "std::erfc(x)"
log = "std::log(x)"
log2 = "std::log2(x)"
log10 = "std::log10(x)"
exp = "std::exp(x)"
exp2 = "std::exp2(x)"
exp10 = "exp10(x)"
sqrt = "std::sqrt(x)"
"pow3.5" = "std::pow(x, 3.5)"
pow13 = "std::pow(x, 13)"

[stl.overrides]
memset = "[](const {stype} *src, {stype} *dst, size_t N) {{ std::memset(dst, 0, N * sizeof({stype})); }}"
memcpy = "[](const {stype} *src, {stype} *dst, size_t N) {{ std::memcpy(dst, src, N * sizeof({stype})); }}"

[boost]
types = ["float", "double"]
instructions = ["x86_64"]

[boost.calltemplates]
sin_pi = "::boost::math::sin_pi(x)"
sinc_pi = "::boost::math::sinc_pi(x)"
cos_pi = "::boost::math::cos_pi(x)"
tgamma = "::boost::math::tgamma(x)"
lgamma = "::boost::math::lgamma(x)"
digamma = "::boost::math::digamma(x)"
erf = "::boost::math::erf(x)"
erfc = "::boost::math::erfc(x)"
pow13 = "::boost::math::pow<13>(x)"
bessel_Y0 = "::boost::math::cyl_neumann(0, x)"
bessel_Y1 = "::boost::math::cyl_neumann(1, x)"
bessel_Y2 = "::boost::math::cyl_neumann(2, x)"
bessel_I0 = "::boost::math::cyl_bessel_i(0, x)"
bessel_I1 = "::boost::math::cyl_bessel_i(1, x)"
bessel_I2 = "::boost::math::cyl_bessel_i(2, x)"
bessel_J0 = "::boost::math::cyl_bessel_j(0, x)"
bessel_J1 = "::boost::math::cyl_bessel_j(1, x)"
bessel_J2 = "::boost::math::cyl_bessel_j(2, x)"
bessel_K0 = "::boost::math::cyl_bessel_k(0, x)"
bessel_K1 = "::boost::math::cyl_bessel_k(1, x)"
bessel_K2 = "::boost::math::cyl_bessel_k(2, x)"
bessel_j0 = "::boost::math::sph_bessel(0, x)"
bessel_j1 = "::boost::math::sph_bessel(1, x)"
bessel_j2 = "::boost::math::sph_bessel(2, x)"
bessel_y0 = "::boost::math::sph_neumann(0, x)"
bessel_y1 = "::boost::math::sph_neumann(1, x)"
bessel_y2 = "::boost::math::sph_neumann(2, x)"
hermite_0 = "::boost::math::hermite(0, x)"
hermite_1 = "::boost::math::hermite(1, x)"
hermite_2 = "::boost::math::hermite(2, x)"
hermite_3 = "::boost::math::hermite(3, x)"
riemann_zeta = "::boost::math::zeta(x)"


[agnerfog]
types = ["float", "double"]
instructions = ["avx2", "avx512"]

[agnerfog.calltemplates]
sin = "sin(x)"
cos = "cos(x)"
tan = "tan(x)"
asin = "asin(x)"
acos = "acos(x)"
atan = "atan(x)"
sinh = "sinh(x)"
cosh = "cosh(x)"
tanh = "tanh(x)"
asinh = "asinh(x)"
acosh = "acosh(x)"
atanh = "atanh(x)"
log = "log(x)"
log2 = "log2(x)"
log10 = "log10(x)"
exp = "exp(x)"
exp2 = "exp2(x)"
exp10 = "exp10(x)"
sqrt = "sqrt(x)"
"pow3.5" = "pow(x, 3.5)"
pow13 = "pow(x, 13)"
memcpy = "x"
memset = "{vectype}{{0.0}}"

[eigen]
types = ["float", "double"]
instructions = ["unknown"]

[eigen.overrides]
cos = "[](const {stype} *src, {stype} *dst, size_t N) {{ Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N) = Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N).{func}(); }}"
sin = "[](const {stype} *src, {stype} *dst, size_t N) {{ Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N) = Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N).{func}(); }}"
tan = "[](const {stype} *src, {stype} *dst, size_t N) {{ Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N) = Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N).{func}(); }}"
cosh = "[](const {stype} *src, {stype} *dst, size_t N) {{ Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N) = Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N).{func}(); }}"
sinh = "[](const {stype} *src, {stype} *dst, size_t N) {{ Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N) = Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N).{func}(); }}"
tanh = "[](const {stype} *src, {stype} *dst, size_t N) {{ Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N) = Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N).{func}(); }}"
exp = "[](const {stype} *src, {stype} *dst, size_t N) {{ Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N) = Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N).{func}(); }}"
log = "[](const {stype} *src, {stype} *dst, size_t N) {{ Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N) = Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N).{func}(); }}"
log10 = "[](const {stype} *src, {stype} *dst, size_t N) {{ Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N) = Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N).{func}(); }}"
"pow3.5" = "[](const {stype} *src, {stype} *dst, size_t N) {{ Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N) = Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N).pow(3.5); }}"
pow13 = "[](const {stype} *src, {stype} *dst, size_t N) {{ Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N) = Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N).pow(13); }}"
asin = "[](const {stype} *src, {stype} *dst, size_t N) {{ Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N) = Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N).{func}(); }}"
acos = "[](const {stype} *src, {stype} *dst, size_t N) {{ Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N) = Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N).{func}(); }}"
atan = "[](const {stype} *src, {stype} *dst, size_t N) {{ Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N) = Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N).{func}(); }}"
asinh = "[](const {stype} *src, {stype} *dst, size_t N) {{ Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N) = Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N).{func}(); }}"
acosh = "[](const {stype} *src, {stype} *dst, size_t N) {{ Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N) = Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N).{func}(); }}"
atanh = "[](const {stype} *src, {stype} *dst, size_t N) {{ Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N) = Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N).{func}(); }}"
erf = "[](const {stype} *src, {stype} *dst, size_t N) {{ Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N) = Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N).{func}(); }}"
erfc = "[](const {stype} *src, {stype} *dst, size_t N) {{ Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N) = Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N).{func}(); }}"
lgamma = "[](const {stype} *src, {stype} *dst, size_t N) {{ Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N) = Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N).{func}(); }}"
digamma = "[](const {stype} *src, {stype} *dst, size_t N) {{ Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N) = Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N).{func}(); }}"
ndtri = "[](const {stype} *src, {stype} *dst, size_t N) {{ Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N) = Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N).{func}(); }}"
sqrt = "[](const {stype} *src, {stype} *dst, size_t N) {{ Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N) = Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N).{func}(); }}"
rsqrt = "[](const {stype} *src, {stype} *dst, size_t N) {{ Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N) = Eigen::Map<Eigen::ArrayX<{stype}>>(dst, N).{func}(); }}"


[gsl]
types = ["double"]
instructions = ["x86_64"]

[gsl.calltemplates]
sin_pi = "gsl_sf_sin_pi(x)"
cos_pi = "gsl_sf_cos_pi(x)"
sin = "gsl_sf_sin(x)"
cos = "gsl_sf_cos(x)"
sinc = "gsl_sf_sinc(x / M_PI)"
sinc_pi = "gsl_sf_sinc(x)"
erf = "gsl_sf_erf(x)"
erfc = "gsl_sf_erfc(x)"
tgamma = "gsl_sf_gamma(x)"
lgamma = "gsl_sf_lngamma(x)"
log = "gsl_sf_log(x)"
exp = "gsl_sf_exp(x)"
pow13 = "gsl_sf_pow_int(x, 13)"
bessel_Y0 = "gsl_sf_bessel_Y0(x)"
bessel_Y1 = "gsl_sf_bessel_Y1(x)"
bessel_Y2 = "gsl_sf_bessel_Yn(2, x)"
bessel_I0 = "gsl_sf_bessel_I0(x)"
bessel_I1 = "gsl_sf_bessel_I1(x)"
bessel_I2 = "gsl_sf_bessel_In(2, x)"
bessel_J0 = "gsl_sf_bessel_J0(x)"
bessel_J1 = "gsl_sf_bessel_J1(x)"
bessel_J2 = "gsl_sf_bessel_Jn(2, x)"
bessel_K0 = "gsl_sf_bessel_K0(x)"
bessel_K1 = "gsl_sf_bessel_K1(x)"
bessel_K2 = "gsl_sf_bessel_Kn(2, x)"
bessel_j0 = "gsl_sf_bessel_j0(x)"
bessel_j1 = "gsl_sf_bessel_j1(x)"
bessel_j2 = "gsl_sf_bessel_j2(x)"
bessel_y0 = "gsl_sf_bessel_y0(x)"
bessel_y1 = "gsl_sf_bessel_y1(x)"
bessel_y2 = "gsl_sf_bessel_y2(x)"
hermite_0 = "gsl_sf_hermite(0, x)"
hermite_1 = "gsl_sf_hermite(1, x)"
hermite_2 = "gsl_sf_hermite(2, x)"
hermite_3 = "gsl_sf_hermite(3, x)"
riemann_zeta = "gsl_sf_zeta(x)"

[sleef]
types = ["float", "double"]
instructions = ["x86_64", "avx2", "avx512"]

[sleef.calltemplates.sin_pi]
float_x86_64 = "Sleef_sinpif1_u05purecfma(x)"
float_avx2 = "Sleef_sinpif{veclevel}_u05avx2(x)"
float_avx512 = "Sleef_sinpif{veclevel}_u05avx512f(x)"
double_x86_64 = "Sleef_sinpid1_u05purecfma(x)"
double_avx2 = "Sleef_sinpid{veclevel}_u05avx2(x)"
double_avx512 = "Sleef_sinpid{veclevel}_u05avx512f(x)"

[sleef.calltemplates.cos_pi]
float_x86_64 = "Sleef_cospif1_u05purecfma(x)"
float_avx2 = "Sleef_cospif{veclevel}_u05avx2(x)"
float_avx512 = "Sleef_cospif{veclevel}_u05avx512f(x)"
double_x86_64 = "Sleef_cospid1_u05purecfma(x)"
double_avx2 = "Sleef_cospid{veclevel}_u05avx2(x)"
double_avx512 = "Sleef_cospid{veclevel}_u05avx512f(x)"

[sleef.calltemplates.sin]
float_x86_64 = "Sleef_sinf1_u10purecfma(x)"
float_avx2 = "Sleef_sinf{veclevel}_u10avx2(x)"
float_avx512 = "Sleef_sinf{veclevel}_u10avx512f(x)"
double_x86_64 = "Sleef_sind1_u10purecfma(x)"
double_avx2 = "Sleef_sind{veclevel}_u10avx2(x)"
double_avx512 = "Sleef_sind{veclevel}_u10avx512f(x)"

[sleef.calltemplates.cos]
float_x86_64 = "Sleef_cosf1_u10purecfma(x)"
float_avx2 = "Sleef_cosf{veclevel}_u10avx2(x)"
float_avx512 = "Sleef_cosf{veclevel}_u10avx512f(x)"
double_x86_64 = "Sleef_cosd1_u10purecfma(x)"
double_avx2 = "Sleef_cosd{veclevel}_u10avx2(x)"
double_avx512 = "Sleef_cosd{veclevel}_u10avx512f(x)"

[sleef.calltemplates.tan]
float_x86_64 = "Sleef_tanf1_u10purecfma(x)"
float_avx2 = "Sleef_tanf{veclevel}_u10avx2(x)"
float_avx512 = "Sleef_tanf{veclevel}_u10avx512f(x)"
double_x86_64 = "Sleef_tand1_u10purecfma(x)"
double_avx2 = "Sleef_tand{veclevel}_u10avx2(x)"
double_avx512 = "Sleef_tand{veclevel}_u10avx512f(x)"

[sleef.calltemplates.sinh]
float_x86_64 = "Sleef_sinhf1_u10purecfma(x)"
float_avx2 = "Sleef_sinhf{veclevel}_u10avx2(x)"
float_avx512 = "Sleef_sinhf{veclevel}_u10avx512f(x)"
double_x86_64 = "Sleef_sinhd1_u10purecfma(x)"
double_avx2 = "Sleef_sinhd{veclevel}_u10avx2(x)"
double_avx512 = "Sleef_sinhd{veclevel}_u10avx512f(x)"

[sleef.calltemplates.cosh]
float_x86_64 = "Sleef_coshf1_u10purecfma(x)"
float_avx2 = "Sleef_coshf{veclevel}_u10avx2(x)"
float_avx512 = "Sleef_coshf{veclevel}_u10avx512f(x)"
double_x86_64 = "Sleef_coshd1_u10purecfma(x)"
double_avx2 = "Sleef_coshd{veclevel}_u10avx2(x)"
double_avx512 = "Sleef_coshd{veclevel}_u10avx512f(x)"

[sleef.calltemplates.tanh]
float_x86_64 = "Sleef_tanhf1_u10purecfma(x)"
float_avx2 = "Sleef_tanhf{veclevel}_u10avx2(x)"
float_avx512 = "Sleef_tanhf{veclevel}_u10avx512f(x)"
double_x86_64 = "Sleef_tanhd1_u10purecfma(x)"
double_avx2 = "Sleef_tanhd{veclevel}_u10avx2(x)"
double_avx512 = "Sleef_tanhd{veclevel}_u10avx512f(x)"

[sleef.calltemplates.asin]
float_x86_64 = "Sleef_asinf1_u10purecfma(x)"
float_avx2 = "Sleef_asinf{veclevel}_u10avx2(x)"
float_avx512 = "Sleef_asinf{veclevel}_u10avx512f(x)"
double_x86_64 = "Sleef_asind1_u10purecfma(x)"
double_avx2 = "Sleef_asind{veclevel}_u10avx2(x)"
double_avx512 = "Sleef_asind{veclevel}_u10avx512f(x)"

[sleef.calltemplates.acos]
float_x86_64 = "Sleef_acosf1_u10purecfma(x)"
float_avx2 = "Sleef_acosf{veclevel}_u10avx2(x)"
float_avx512 = "Sleef_acosf{veclevel}_u10avx512f(x)"
double_x86_64 = "Sleef_acosd1_u10purecfma(x)"
double_avx2 = "Sleef_acosd{veclevel}_u10avx2(x)"
double_avx512 = "Sleef_acosd{veclevel}_u10avx512f(x)"

[sleef.calltemplates.atan]
float_x86_64 = "Sleef_atanf1_u10purecfma(x)"
float_avx2 = "Sleef_atanf{veclevel}_u10avx2(x)"
float_avx512 = "Sleef_atanf{veclevel}_u10avx512f(x)"
double_x86_64 = "Sleef_atand1_u10purecfma(x)"
double_avx2 = "Sleef_atand{veclevel}_u10avx2(x)"
double_avx512 = "Sleef_atand{veclevel}_u10avx512f(x)"

[sleef.calltemplates.asinh]
float_x86_64 = "Sleef_asinhf1_u10purecfma(x)"
float_avx2 = "Sleef_asinhf{veclevel}_u10avx2(x)"
float_avx512 = "Sleef_asinhf{veclevel}_u10avx512f(x)"
double_x86_64 = "Sleef_asinhd1_u10purecfma(x)"
double_avx2 = "Sleef_asinhd{veclevel}_u10avx2(x)"
double_avx512 = "Sleef_asinhd{veclevel}_u10avx512f(x)"

[sleef.calltemplates.acosh]
float_x86_64 = "Sleef_acoshf1_u10purecfma(x)"
float_avx2 = "Sleef_acoshf{veclevel}_u10avx2(x)"
float_avx512 = "Sleef_acoshf{veclevel}_u10avx512f(x)"
double_x86_64 = "Sleef_acoshd1_u10purecfma(x)"
double_avx2 = "Sleef_acoshd{veclevel}_u10avx2(x)"
double_avx512 = "Sleef_acoshd{veclevel}_u10avx512f(x)"

[sleef.calltemplates.atanh]
float_x86_64 = "Sleef_atanhf1_u10purecfma(x)"
float_avx2 = "Sleef_atanhf{veclevel}_u10avx2(x)"
float_avx512 = "Sleef_atanhf{veclevel}_u10avx512f(x)"
double_x86_64 = "Sleef_atanhd1_u10purecfma(x)"
double_avx2 = "Sleef_atanhd{veclevel}_u10avx2(x)"
double_avx512 = "Sleef_atanhd{veclevel}_u10avx512f(x)"

[sleef.calltemplates.log]
float_x86_64 = "Sleef_logf1_u10purecfma(x)"
float_avx2 = "Sleef_logf{veclevel}_u10avx2(x)"
float_avx512 = "Sleef_logf{veclevel}_u10avx512f(x)"
double_x86_64 = "Sleef_logd1_u10purecfma(x)"
double_avx2 = "Sleef_logd{veclevel}_u10avx2(x)"
double_avx512 = "Sleef_logd{veclevel}_u10avx512f(x)"

[sleef.calltemplates.log2]
float_x86_64 = "Sleef_log2f1_u10purecfma(x)"
float_avx2 = "Sleef_log2f{veclevel}_u10avx2(x)"
float_avx512 = "Sleef_log2f{veclevel}_u10avx512f(x)"
double_x86_64 = "Sleef_log2d1_u10purecfma(x)"
double_avx2 = "Sleef_log2d{veclevel}_u10avx2(x)"
double_avx512 = "Sleef_log2d{veclevel}_u10avx512f(x)"

[sleef.calltemplates.log10]
float_x86_64 = "Sleef_log10f1_u10purecfma(x)"
float_avx2 = "Sleef_log10f{veclevel}_u10avx2(x)"
float_avx512 = "Sleef_log10f{veclevel}_u10avx512f(x)"
double_x86_64 = "Sleef_log10d1_u10purecfma(x)"
double_avx2 = "Sleef_log10d{veclevel}_u10avx2(x)"
double_avx512 = "Sleef_log10d{veclevel}_u10avx512f(x)"

[sleef.calltemplates.exp]
float_x86_64 = "Sleef_expf1_u10purecfma(x)"
float_avx2 = "Sleef_expf{veclevel}_u10avx2(x)"
float_avx512 = "Sleef_expf{veclevel}_u10avx512f(x)"
double_x86_64 = "Sleef_expd1_u10purecfma(x)"
double_avx2 = "Sleef_expd{veclevel}_u10avx2(x)"
double_avx512 = "Sleef_expd{veclevel}_u10avx512f(x)"

[sleef.calltemplates.exp2]
float_x86_64 = "Sleef_exp2f1_u10purecfma(x)"
float_avx2 = "Sleef_exp2f{veclevel}_u10avx2(x)"
float_avx512 = "Sleef_exp2f{veclevel}_u10avx512f(x)"
double_x86_64 = "Sleef_exp2d1_u10purecfma(x)"
double_avx2 = "Sleef_exp2d{veclevel}_u10avx2(x)"
double_avx512 = "Sleef_exp2d{veclevel}_u10avx512f(x)"

[sleef.calltemplates.exp10]
float_x86_64 = "Sleef_exp10f1_u10purecfma(x)"
float_avx2 = "Sleef_exp10f{veclevel}_u10avx2(x)"
float_avx512 = "Sleef_exp10f{veclevel}_u10avx512f(x)"
double_x86_64 = "Sleef_exp10d1_u10purecfma(x)"
double_avx2 = "Sleef_exp10d{veclevel}_u10avx2(x)"
double_avx512 = "Sleef_exp10d{veclevel}_u10avx512f(x)"

[sleef.calltemplates.erf]
float_x86_64 = "Sleef_erff1_u10purecfma(x)"
float_avx2 = "Sleef_erff{veclevel}_u10avx2(x)"
float_avx512 = "Sleef_erff{veclevel}_u10avx512f(x)"
double_x86_64 = "Sleef_erfd1_u10purecfma(x)"
double_avx2 = "Sleef_erfd{veclevel}_u10avx2(x)"
double_avx512 = "Sleef_erfd{veclevel}_u10avx512f(x)"

[sleef.calltemplates.erfc]
float_x86_64 = "Sleef_erfcf1_u15purecfma(x)"
float_avx2 = "Sleef_erfcf{veclevel}_u15avx2(x)"
float_avx512 = "Sleef_erfcf{veclevel}_u15avx512f(x)"
double_x86_64 = "Sleef_erfcd1_u15purecfma(x)"
double_avx2 = "Sleef_erfcd{veclevel}_u15avx2(x)"
double_avx512 = "Sleef_erfcd{veclevel}_u15avx512f(x)"

[sleef.calltemplates.lgamma]
float_x86_64 = "Sleef_lgammaf1_u10purecfma(x)"
float_avx2 = "Sleef_lgammaf{veclevel}_u10avx2(x)"
float_avx512 = "Sleef_lgammaf{veclevel}_u10avx512f(x)"
double_x86_64 = "Sleef_lgammad1_u10purecfma(x)"
double_avx2 = "Sleef_lgammad{veclevel}_u10avx2(x)"
double_avx512 = "Sleef_lgammad{veclevel}_u10avx512f(x)"

[sleef.calltemplates.tgamma]
float_x86_64 = "Sleef_tgammaf1_u10purecfma(x)"
float_avx2 = "Sleef_tgammaf{veclevel}_u10avx2(x)"
float_avx512 = "Sleef_tgammaf{veclevel}_u10avx512f(x)"
double_x86_64 = "Sleef_tgammad1_u10purecfma(x)"
double_avx2 = "Sleef_tgammad{veclevel}_u10avx2(x)"
double_avx512 = "Sleef_tgammad{veclevel}_u10avx512f(x)"

[sleef.calltemplates.sqrt]
float_x86_64 = "Sleef_sqrtf1_u05purecfma(x)"
float_avx2 = "Sleef_sqrtf{veclevel}_u05avx2(x)"
float_avx512 = "Sleef_sqrtf{veclevel}_u05avx512f(x)"
double_x86_64 = "Sleef_sqrtd1_u05purecfma(x)"
double_avx2 = "Sleef_sqrtd{veclevel}_u05avx2(x)"
double_avx512 = "Sleef_sqrtd{veclevel}_u05avx512f(x)"

[sleef.calltemplates."pow3.5"]
float_x86_64 = "Sleef_powf1_u10purecfma(x, 3.5)"
float_avx2 = "Sleef_powf{veclevel}_u10avx2(x, {vectype}{{3.5}})"
float_avx512 = "Sleef_powf{veclevel}_u10avx512f(x, {vectype}{{3.5}})"
double_x86_64 = "Sleef_powd1_u10purecfma(x, 3.5)"
double_avx2 = "Sleef_powd{veclevel}_u10avx2(x, {vectype}{{3.5}})"
double_avx512 = "Sleef_powd{veclevel}_u10avx512f(x, {vectype}{{3.5}})"

[sleef.calltemplates.pow13]
float_x86_64 = "Sleef_powf1_u10purecfma(x, 13.0)"
float_avx2 = "Sleef_powf{veclevel}_u10avx2(x, {vectype}{{13.0}})"
float_avx512 = "Sleef_powf{veclevel}_u10avx512f(x, {vectype}{{13.0}})"
double_x86_64 = "Sleef_powd1_u10purecfma(x, 13.0)"
double_avx2 = "Sleef_powd{veclevel}_u10avx2(x, {vectype}{{13.0}})"
double_avx512 = "Sleef_powd{veclevel}_u10avx512f(x, {vectype}{{13.0}})"
